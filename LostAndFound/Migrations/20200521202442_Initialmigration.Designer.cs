// <auto-generated />
using System;
using LostAndFound.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LostAndFound.Migrations
{
    [DbContext(typeof(LAFDbContext))]
    [Migration("20200521202442_Initialmigration")]
    partial class Initialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LostAndFound.Data.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("AddressType");

                    b.Property<string>("Citizenship")
                        .HasMaxLength(50);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName")
                        .HasMaxLength(100);

                    b.Property<string>("ImagePath")
                        .HasMaxLength(300);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NationalIdentityNo")
                        .HasMaxLength(100);

                    b.Property<int?>("NationalIdentityType");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(120);

                    b.Property<int?>("isActive");

                    b.Property<int?>("isVarified");

                    b.Property<string>("otpCode");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(120);

                    b.Property<int?>("userTypeId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("userTypeId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Auth.LAFModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imageClass")
                        .HasMaxLength(150);

                    b.Property<int?>("isDelete");

                    b.Property<string>("isTeam")
                        .HasMaxLength(150);

                    b.Property<string>("moduleName")
                        .HasMaxLength(150);

                    b.Property<string>("moduleNameBN")
                        .HasMaxLength(150);

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("LAFModules");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Auth.MailLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("isSuccess");

                    b.Property<string>("mailType")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("notSendReason")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("recipient")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("refNo")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("sendTime");

                    b.Property<string>("sender")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("subject")
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("MailLogs");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Auth.ModuleAccessPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("applicationRoleId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("eRPModuleId");

                    b.Property<int?>("inventoryModuleId");

                    b.Property<int?>("isDelete");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("applicationRoleId");

                    b.HasIndex("eRPModuleId");

                    b.ToTable("ModuleAccessPages");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Auth.Navbar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("action")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("activeLi")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("area")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("controller")
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("displayOrder");

                    b.Property<string>("imageClass")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("isParent");

                    b.Property<int?>("moduleId");

                    b.Property<string>("nameOption")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("nameOptionBangla")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("parentID");

                    b.Property<bool>("status");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("moduleId");

                    b.ToTable("Navbars");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Auth.UserAccessPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("applicationRoleId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isAccess");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("navbarId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("applicationRoleId");

                    b.HasIndex("navbarId");

                    b.ToTable("UserAccessPages");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Auth.UserLogHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("browserName")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("ipAddress")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<DateTime>("logTime")
                        .HasMaxLength(250);

                    b.Property<string>("pcName")
                        .HasMaxLength(250);

                    b.Property<int?>("status");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<string>("userId")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("UserLogHistories");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Auth.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<string>("userTypeName");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.AttachmentInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("attachmentTypeId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("fileName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("filePath")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<string>("fileType")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<int?>("gDInformationId");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("masterId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("attachmentTypeId");

                    b.HasIndex("gDInformationId");

                    b.ToTable("AttachmentInformation");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.DNAProfileDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("genotype1");

                    b.Property<string>("genotype2");

                    b.Property<int?>("isDelete");

                    b.Property<string>("locous");

                    b.Property<int>("manInformationId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("manInformationId");

                    b.ToTable("DNAProfileDetails");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.DressDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("inTheBodyColorId");

                    b.Property<int?>("inTheBodyId");

                    b.Property<int?>("inTheHeadColorId");

                    b.Property<int?>("inTheHeadId");

                    b.Property<int?>("inTheLegsColorId");

                    b.Property<int?>("inTheLegsId");

                    b.Property<int?>("inTheThroatColorId");

                    b.Property<int?>("inTheThroatId");

                    b.Property<int?>("inTheWaistColorId");

                    b.Property<int?>("inTheWaistId");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("manInformationId");

                    b.Property<decimal?>("shoesSize")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("shoesSizeType")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("inTheBodyColorId");

                    b.HasIndex("inTheBodyId");

                    b.HasIndex("inTheHeadColorId");

                    b.HasIndex("inTheHeadId");

                    b.HasIndex("inTheLegsColorId");

                    b.HasIndex("inTheLegsId");

                    b.HasIndex("inTheThroatColorId");

                    b.HasIndex("inTheThroatId");

                    b.HasIndex("inTheWaistColorId");

                    b.HasIndex("inTheWaistId");

                    b.HasIndex("manInformationId");

                    b.ToTable("DressDescriptions");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.GDInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("documentDescription")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<int?>("documentTypeId");

                    b.Property<int?>("gDTypeId");

                    b.Property<DateTime?>("gdDate");

                    b.Property<string>("gdFor")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("gdNumber")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("productTypeId");

                    b.Property<int?>("statusId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("documentTypeId");

                    b.HasIndex("gDTypeId");

                    b.HasIndex("productTypeId");

                    b.ToTable("GDInformation");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.IdentificationAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("fileName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("filePath")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<string>("fileType")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<int?>("indentifyId");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("masterId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("indentifyId");

                    b.ToTable("IdentificationAttachments");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.IndentifyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("attachmentPath")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<string>("bloodGroup")
                        .HasColumnType("NVARCHAR(5)");

                    b.Property<int?>("colorsId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("gDInformationId");

                    b.Property<string>("identifySign")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<string>("identifyType")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("maritalStatusId");

                    b.Property<int?>("occupationId");

                    b.Property<int?>("religionId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("colorsId");

                    b.HasIndex("gDInformationId");

                    b.HasIndex("maritalStatusId");

                    b.HasIndex("occupationId");

                    b.HasIndex("religionId");

                    b.ToTable("IndentifyInfos");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.ManHabitDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("habitId");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("manInformationId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("habitId");

                    b.HasIndex("manInformationId");

                    b.ToTable("ManHabitDetails");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.ManInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("agePeriodId");

                    b.Property<string>("aproxAge")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("fatherName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("gDInformationId");

                    b.Property<int?>("genderId");

                    b.Property<string>("identityNo")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("isHealthDisabled");

                    b.Property<string>("motherName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("nationalIdentityTypeId");

                    b.Property<string>("number")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<int?>("numberTypeId");

                    b.Property<int?>("relationTypeId");

                    b.Property<string>("spouseName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("agePeriodId");

                    b.HasIndex("gDInformationId");

                    b.HasIndex("genderId");

                    b.HasIndex("nationalIdentityTypeId");

                    b.HasIndex("numberTypeId");

                    b.HasIndex("relationTypeId");

                    b.ToTable("ManInformation");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.ManSpeechDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("manInformationId");

                    b.Property<int?>("speechId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("manInformationId");

                    b.HasIndex("speechId");

                    b.ToTable("ManSpeechDetails");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.OtherDocumentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("attachment")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<string>("bodyType")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("brandName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("color")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("description")
                        .HasColumnType("NVARCHAR(350)");

                    b.Property<int?>("documentTypeId");

                    b.Property<int?>("gDInformationId");

                    b.Property<string>("identificationMark")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("modelName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<decimal?>("price");

                    b.Property<decimal?>("quantity");

                    b.Property<string>("structureType")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("documentTypeId");

                    b.HasIndex("gDInformationId");

                    b.ToTable("OtherDocumentDetails");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.OtherPersonInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("gDInformationId");

                    b.Property<string>("identityNo")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("mobileNo")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("nationalIdentityTypeId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("gDInformationId");

                    b.HasIndex("nationalIdentityTypeId");

                    b.ToTable("OtherPersonInformation");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.PhysicalDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("beardTypeId");

                    b.Property<int?>("bodyChinTypeId");

                    b.Property<int?>("bodyColorId");

                    b.Property<int?>("bodyStructureId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("earTypeId");

                    b.Property<int?>("eyeTypeId");

                    b.Property<int?>("faceShapeTypeId");

                    b.Property<int?>("foreHeadTypeId");

                    b.Property<int?>("headTypeId");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("manInformationId");

                    b.Property<int?>("moustacheTypeId");

                    b.Property<int?>("mouthTypeId");

                    b.Property<int?>("neckTypeId");

                    b.Property<int?>("noseTypeId");

                    b.Property<int?>("specialBodyConditionId");

                    b.Property<int?>("teethTypeId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("beardTypeId");

                    b.HasIndex("bodyChinTypeId");

                    b.HasIndex("bodyColorId");

                    b.HasIndex("bodyStructureId");

                    b.HasIndex("earTypeId");

                    b.HasIndex("eyeTypeId");

                    b.HasIndex("faceShapeTypeId");

                    b.HasIndex("foreHeadTypeId");

                    b.HasIndex("headTypeId");

                    b.HasIndex("manInformationId");

                    b.HasIndex("moustacheTypeId");

                    b.HasIndex("mouthTypeId");

                    b.HasIndex("neckTypeId");

                    b.HasIndex("noseTypeId");

                    b.HasIndex("specialBodyConditionId");

                    b.HasIndex("teethTypeId");

                    b.ToTable("PhysicalDescriptions");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.SpaceAndTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("districtId");

                    b.Property<int?>("divisionId");

                    b.Property<int?>("gDInformationId");

                    b.Property<int?>("isDelete");

                    b.Property<DateTime?>("lafDate");

                    b.Property<string>("lafTime")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("placeDetails")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("postOfficeId");

                    b.Property<int?>("thanaId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("districtId");

                    b.HasIndex("divisionId");

                    b.HasIndex("gDInformationId");

                    b.HasIndex("postOfficeId");

                    b.HasIndex("thanaId");

                    b.ToTable("SpaceAndTimes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.VehicleInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ccNo")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<string>("chasisNo")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("engineNo")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<int>("gDInformationId");

                    b.Property<int?>("isDelete");

                    b.Property<string>("madeBy")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<string>("madeIn")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<DateTime?>("mfcDate");

                    b.Property<string>("modelNo")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<string>("regNoFirstPart")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("regNoSecondPart")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("regNoThiredPart")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<int?>("vehicleBrandId");

                    b.Property<string>("vehicleModelNo")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<string>("vehicleRegNo")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("vehicleTypeId");

                    b.HasKey("Id");

                    b.HasIndex("gDInformationId");

                    b.HasIndex("vehicleBrandId");

                    b.HasIndex("vehicleTypeId");

                    b.ToTable("VehicleInformation");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Master.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("countryCode")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("countryName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("countryNameBn")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("shortName")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Master.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("districtCode")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("districtName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("districtNameBn")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<int>("divisionId");

                    b.Property<int?>("isDelete");

                    b.Property<string>("shortName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("divisionId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Master.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("countryId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("divisionCode")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("divisionName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("divisionNameBn");

                    b.Property<int?>("isDelete");

                    b.Property<string>("shortName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("countryId");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Master.PostOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int>("districtId");

                    b.Property<int?>("isDelete");

                    b.Property<string>("postalCode")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("postalName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("postalNameBn")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("postalShortName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("districtId");

                    b.ToTable("PostOffices");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Master.Thana", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int>("districtId");

                    b.Property<int?>("isDelete");

                    b.Property<string>("shortName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("thanaCode")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("thanaName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("thanaNameBn")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("districtId");

                    b.ToTable("Thanas");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.AddressCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("AddressCategories");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.AddressInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("addressDetails")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<string>("blockSector")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<int?>("countryId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("districtId");

                    b.Property<int?>("divisionId");

                    b.Property<string>("houseVillage")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("manInformationId");

                    b.Property<string>("oneLineAddress")
                        .HasColumnType("NVARCHAR(200)");

                    b.Property<string>("postCode")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("postOffice")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("roadNumber")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<int?>("thanaId");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("union")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("countryId");

                    b.HasIndex("districtId");

                    b.HasIndex("divisionId");

                    b.HasIndex("manInformationId");

                    b.HasIndex("thanaId");

                    b.ToTable("AddressInformation");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("animalName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("animalNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(420)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.AttachmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("attachmentTypeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("attachmentTypeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("AttachmentTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.Colors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("colorCode")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("colorName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("colorNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ComputerAccessoriesBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("brandName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("brandNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("ComputerAccessoriesBrands");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.DocumentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("categoryName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("categoryNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("documentTypeId");

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("documentTypeId");

                    b.ToTable("DocumentCategories");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.DocumentCategoryAccessories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("accessoriesName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("accessoriesNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("documentCategoryId");

                    b.Property<int?>("documentTypeId");

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("documentCategoryId");

                    b.HasIndex("documentTypeId");

                    b.ToTable("DocumentCategoryAccessories");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.DocumentCategoryBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("brandName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("brandNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("documentCategoryId");

                    b.Property<int?>("documentTypeId");

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("documentCategoryId");

                    b.HasIndex("documentTypeId");

                    b.ToTable("DocumentCategoryBrands");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("documentFor")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<string>("documentTypeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("documentTypeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.AddressSourceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("sourceName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("sourceNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("AddressSourceTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.AgePeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("periodName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("periodNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("AgePeriods");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.BeardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("BeardTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.BodyChinType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("chinTypeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("chinTypeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("BodyChinTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.BodyColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("colorCode")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("colorName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("colorNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("BodyColors");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.BodyStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("structureName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("structureNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("BodyStructures");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.CareType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("CareTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.Complextion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("colorCode")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("nameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Complextions");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.DeadbodyCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("conditionName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("conditionNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("DeadbodyConditions");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.DeathType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("DeathTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.EarType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("EarTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.EyeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("EyeTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.FaceShapeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("FaceShapeTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.ForeHeadType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("ForeHeadTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.Habit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("habitName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("habitNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Habits");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.HairType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("HairTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.HeadType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("HeadTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.InTheBody", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("nameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("InTheBodies");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.InTheHead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("nameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("InTheHeads");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.InTheLegs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("nameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("InTheLegs");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.InTheThroat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("nameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("InTheThroats");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.InTheWaist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("nameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("InTheWaists");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("nameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("MaritalStatuses");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.MeasurementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("MeasurementTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.MeterialCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("conditionName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("conditionNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("MeterialConditions");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.MoustacheType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("MoustacheTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.MouthType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("MouthTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.NeckType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("NeckTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.NoseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("NoseTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.NumberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("NumberTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.PurposeOfVisite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("purposeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("purposeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("PurposeOfVisites");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.RelationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("relationName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("relationNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("RelationTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("religionName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("religionNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.ReligionCust", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("custName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("custNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("religionId");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("religionId");

                    b.ToTable("ReligionCusts");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.SpecialBodyCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("conditionName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("conditionNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("SpecialBodyConditions");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.Speech", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("speechName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("speechNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Speeches");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.TeethType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("TeethTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.GDType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("gdTypeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("gdTypeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("GDTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("genderName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("genderNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.LostAndFoundType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("LostAndFoundTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.MDOtherItems.ElectronicsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("ElectronicsTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.MDOtherItems.FileDocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("FileDocumentTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.MDOtherItems.MobilePhoneType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("typeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("typeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("MobilePhoneTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.MDOtherItems.OtherBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("brandFor")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("brandName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("brandNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("OtherBrands");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ManBodyPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("partName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("partNameBN")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("ManBodyParts");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.MetropolitanArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("areaName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("areaNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("districtId");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("MetropolitanAreas");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.NationalIdentityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("nationalIdentityName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("nationalIdentityNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("NationalIdentityTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.Occupation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(420)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("nameBn")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Occupations");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("productTypeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("productTypeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.RegistrationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("levelName")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("levelNameBn")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("RegistrationLevels");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.VehicleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("modelName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("modelNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<int?>("vehicleTypeId");

                    b.HasKey("Id");

                    b.HasIndex("vehicleTypeId");

                    b.ToTable("VehicleModels");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imagePath")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<string>("vehicleTypeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("vehicleTypeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.ApplicationUser", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.Auth.UserType", "userType")
                        .WithMany()
                        .HasForeignKey("userTypeId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Auth.ModuleAccessPage", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "applicationRole")
                        .WithMany()
                        .HasForeignKey("applicationRoleId");

                    b.HasOne("LostAndFound.Data.Entity.Auth.LAFModule", "eRPModule")
                        .WithMany()
                        .HasForeignKey("eRPModuleId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Auth.Navbar", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.Auth.LAFModule", "module")
                        .WithMany()
                        .HasForeignKey("moduleId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Auth.UserAccessPage", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "applicationRole")
                        .WithMany()
                        .HasForeignKey("applicationRoleId");

                    b.HasOne("LostAndFound.Data.Entity.Auth.Navbar", "navbar")
                        .WithMany()
                        .HasForeignKey("navbarId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.AttachmentInformation", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.MasterData.AttachmentType", "attachmentType")
                        .WithMany()
                        .HasForeignKey("attachmentTypeId");

                    b.HasOne("LostAndFound.Data.Entity.LostFound.GDInformation", "gDInformation")
                        .WithMany()
                        .HasForeignKey("gDInformationId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.DNAProfileDetails", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.LostFound.ManInformation", "manInformation")
                        .WithMany()
                        .HasForeignKey("manInformationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.DressDescription", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.MasterData.Colors", "inTheBodyColor")
                        .WithMany()
                        .HasForeignKey("inTheBodyColorId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.InTheBody", "inTheBody")
                        .WithMany()
                        .HasForeignKey("inTheBodyId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.Colors", "inTheHeadColor")
                        .WithMany()
                        .HasForeignKey("inTheHeadColorId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.InTheHead", "inTheHead")
                        .WithMany()
                        .HasForeignKey("inTheHeadId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.Colors", "inTheLegsColor")
                        .WithMany()
                        .HasForeignKey("inTheLegsColorId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.InTheLegs", "inTheLegs")
                        .WithMany()
                        .HasForeignKey("inTheLegsId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.Colors", "inTheThroatColor")
                        .WithMany()
                        .HasForeignKey("inTheThroatColorId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.InTheThroat", "inTheThroat")
                        .WithMany()
                        .HasForeignKey("inTheThroatId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.Colors", "inTheWaistColor")
                        .WithMany()
                        .HasForeignKey("inTheWaistColorId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.InTheWaist", "inTheWaist")
                        .WithMany()
                        .HasForeignKey("inTheWaistId");

                    b.HasOne("LostAndFound.Data.Entity.LostFound.ManInformation", "manInformation")
                        .WithMany()
                        .HasForeignKey("manInformationId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.GDInformation", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.DocumentType", "documentType")
                        .WithMany()
                        .HasForeignKey("documentTypeId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.GDType", "gDType")
                        .WithMany()
                        .HasForeignKey("gDTypeId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ProductType", "productType")
                        .WithMany()
                        .HasForeignKey("productTypeId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.IdentificationAttachment", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.LostFound.IndentifyInfo", "indentify")
                        .WithMany()
                        .HasForeignKey("indentifyId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.IndentifyInfo", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.MasterData.Colors", "colors")
                        .WithMany()
                        .HasForeignKey("colorsId");

                    b.HasOne("LostAndFound.Data.Entity.LostFound.GDInformation", "gDInformation")
                        .WithMany()
                        .HasForeignKey("gDInformationId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.MaritalStatus", "maritalStatus")
                        .WithMany()
                        .HasForeignKey("maritalStatusId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.Occupation", "occupation")
                        .WithMany()
                        .HasForeignKey("occupationId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.Religion", "religion")
                        .WithMany()
                        .HasForeignKey("religionId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.ManHabitDetails", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.Habit", "habit")
                        .WithMany()
                        .HasForeignKey("habitId");

                    b.HasOne("LostAndFound.Data.Entity.LostFound.ManInformation", "manInformation")
                        .WithMany()
                        .HasForeignKey("manInformationId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.ManInformation", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.AgePeriod", "agePeriod")
                        .WithMany()
                        .HasForeignKey("agePeriodId");

                    b.HasOne("LostAndFound.Data.Entity.LostFound.GDInformation", "gDInformation")
                        .WithMany()
                        .HasForeignKey("gDInformationId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.Gender", "gender")
                        .WithMany()
                        .HasForeignKey("genderId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.NationalIdentityType", "nationalIdentityType")
                        .WithMany()
                        .HasForeignKey("nationalIdentityTypeId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.NumberType", "numberType")
                        .WithMany()
                        .HasForeignKey("numberTypeId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.RelationType", "relationType")
                        .WithMany()
                        .HasForeignKey("relationTypeId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.ManSpeechDetails", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.LostFound.ManInformation", "manInformation")
                        .WithMany()
                        .HasForeignKey("manInformationId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.Speech", "speech")
                        .WithMany()
                        .HasForeignKey("speechId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.OtherDocumentDetail", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.MasterData.DocumentType", "documentType")
                        .WithMany()
                        .HasForeignKey("documentTypeId");

                    b.HasOne("LostAndFound.Data.Entity.LostFound.GDInformation", "gDInformation")
                        .WithMany()
                        .HasForeignKey("gDInformationId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.OtherPersonInformation", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.LostFound.GDInformation", "gDInformation")
                        .WithMany()
                        .HasForeignKey("gDInformationId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.NationalIdentityType", "nationalIdentityType")
                        .WithMany()
                        .HasForeignKey("nationalIdentityTypeId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.PhysicalDescription", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.BeardType", "beardType")
                        .WithMany()
                        .HasForeignKey("beardTypeId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.BodyChinType", "bodyChinType")
                        .WithMany()
                        .HasForeignKey("bodyChinTypeId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.BodyColor", "bodyColor")
                        .WithMany()
                        .HasForeignKey("bodyColorId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.BodyStructure", "bodyStructure")
                        .WithMany()
                        .HasForeignKey("bodyStructureId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.EarType", "earType")
                        .WithMany()
                        .HasForeignKey("earTypeId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.EyeType", "eyeType")
                        .WithMany()
                        .HasForeignKey("eyeTypeId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.FaceShapeType", "faceShapeType")
                        .WithMany()
                        .HasForeignKey("faceShapeTypeId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.ForeHeadType", "foreHeadType")
                        .WithMany()
                        .HasForeignKey("foreHeadTypeId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.HeadType", "headType")
                        .WithMany()
                        .HasForeignKey("headTypeId");

                    b.HasOne("LostAndFound.Data.Entity.LostFound.ManInformation", "manInformation")
                        .WithMany()
                        .HasForeignKey("manInformationId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.MoustacheType", "moustacheType")
                        .WithMany()
                        .HasForeignKey("moustacheTypeId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.MouthType", "mouthType")
                        .WithMany()
                        .HasForeignKey("mouthTypeId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.NeckType", "neckType")
                        .WithMany()
                        .HasForeignKey("neckTypeId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.NoseType", "noseType")
                        .WithMany()
                        .HasForeignKey("noseTypeId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.SpecialBodyCondition", "specialBodyCondition")
                        .WithMany()
                        .HasForeignKey("specialBodyConditionId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.TeethType", "teethType")
                        .WithMany()
                        .HasForeignKey("teethTypeId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.SpaceAndTime", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.Master.District", "district")
                        .WithMany()
                        .HasForeignKey("districtId");

                    b.HasOne("LostAndFound.Data.Entity.Master.Division", "division")
                        .WithMany()
                        .HasForeignKey("divisionId");

                    b.HasOne("LostAndFound.Data.Entity.LostFound.GDInformation", "gDInformation")
                        .WithMany()
                        .HasForeignKey("gDInformationId");

                    b.HasOne("LostAndFound.Data.Entity.Master.PostOffice", "postOffice")
                        .WithMany()
                        .HasForeignKey("postOfficeId");

                    b.HasOne("LostAndFound.Data.Entity.Master.Thana", "thana")
                        .WithMany()
                        .HasForeignKey("thanaId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.LostFound.VehicleInformation", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.LostFound.GDInformation", "gDInformation")
                        .WithMany()
                        .HasForeignKey("gDInformationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LostAndFound.Data.Entity.MasterData.VehicleModel", "vehicleBrand")
                        .WithMany()
                        .HasForeignKey("vehicleBrandId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.VehicleType", "vehicleType")
                        .WithMany()
                        .HasForeignKey("vehicleTypeId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Master.District", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.Master.Division", "division")
                        .WithMany()
                        .HasForeignKey("divisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Master.Division", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.Master.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Master.PostOffice", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.Master.District", "district")
                        .WithMany()
                        .HasForeignKey("districtId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.Master.Thana", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.Master.District", "district")
                        .WithMany()
                        .HasForeignKey("districtId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.AddressInformation", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("LostAndFound.Data.Entity.Master.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryId");

                    b.HasOne("LostAndFound.Data.Entity.Master.District", "district")
                        .WithMany()
                        .HasForeignKey("districtId");

                    b.HasOne("LostAndFound.Data.Entity.Master.Division", "division")
                        .WithMany()
                        .HasForeignKey("divisionId");

                    b.HasOne("LostAndFound.Data.Entity.LostFound.ManInformation", "manInformation")
                        .WithMany()
                        .HasForeignKey("manInformationId");

                    b.HasOne("LostAndFound.Data.Entity.Master.Thana", "thana")
                        .WithMany()
                        .HasForeignKey("thanaId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.DocumentCategory", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.MasterData.DocumentType", "documentType")
                        .WithMany()
                        .HasForeignKey("documentTypeId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.DocumentCategoryAccessories", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.MasterData.DocumentCategory", "documentCategory")
                        .WithMany()
                        .HasForeignKey("documentCategoryId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.DocumentType", "documentType")
                        .WithMany()
                        .HasForeignKey("documentTypeId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.DocumentCategoryBrand", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.MasterData.DocumentCategory", "documentCategory")
                        .WithMany()
                        .HasForeignKey("documentCategoryId");

                    b.HasOne("LostAndFound.Data.Entity.MasterData.DocumentType", "documentType")
                        .WithMany()
                        .HasForeignKey("documentTypeId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.ReligionCust", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.MasterData.ExtendedMasterData.Religion", "religion")
                        .WithMany()
                        .HasForeignKey("religionId");
                });

            modelBuilder.Entity("LostAndFound.Data.Entity.MasterData.VehicleModel", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.MasterData.VehicleType", "vehicleType")
                        .WithMany()
                        .HasForeignKey("vehicleTypeId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LostAndFound.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LostAndFound.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
